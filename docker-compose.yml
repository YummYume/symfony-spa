version: '3.3'

services:
  nginx:
    image: nginx:stable
    restart: unless-stopped
    ports:
      - 80:80
    volumes:
      - ./public:/app/public
      - ./docker/dev/nginx/logs:/var/log/nginx
      - ./docker/dev/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      php:
        condition: service_healthy
    container_name: nginx

  php:
    build:
      context: .
      dockerfile: docker/dev/php/Dockerfile
    restart: unless-stopped
    stdin_open: true
    volumes:
      - ./:/app
      - ./docker/dev/php/overrides.ini:/usr/local/etc/php/conf.d/overrides.ini
      - ./docker/dev/php/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf
      - ./docker/dev/php/logs/supervisor:/var/log/supervisor
    container_name: php
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
    healthcheck:
      test: [ "CMD", "php", "-v" ]
      timeout: 30s
      interval: 2s
      retries: 30

  encore:
    build:
      context: .
      dockerfile: docker/dev/encore/Dockerfile
    restart: unless-stopped
    volumes:
      - ./:/app
      - ./docker/dev/encore/logs/supervisor:/var/log/supervisor
      - ./docker/dev/encore/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf
    ports:
      - 9090:9090
    depends_on:
      php:
        condition: service_started
    container_name: encore

  db:
    image: mariadb:10.10.2
    restart: unless-stopped
    container_name: db
    # TODO look into it, seems to not work properly
    # volumes:
    #   - ./data/mysql:/var/lib/mysql/data
    environment:
      MARIADB_ROOT_PASSWORD: "${MARIADB_ROOT_PASSWORD:?err}"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 30s
      interval: 2s
      retries: 30

  phpmyadmin:
    image: phpmyadmin
    restart: unless-stopped
    container_name: phpmyadmin
    ports:
      - 8080:80
    depends_on:
      db:
        condition: service_healthy
    environment:
      PMA_ARBITRARY: 1
      UPLOAD_LIMIT: 512M
      MAX_EXECUTION_TIME: 300

  mailcatcher:
    image: schickling/mailcatcher:latest
    ports:
      - "1080:1080"
    container_name: mailcatcher

  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    container_name: rabbitmq
    ports:
      - 15672:15672

  redis:
    image: redis:7.0-alpine
    restart: unless-stopped
    command: "redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_AUTH:?err}"
    container_name: redis
    volumes:
      - ./data/cache/redis:/data

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379:0:${REDIS_AUTH:?err}"
    depends_on:
      redis:
        condition: service_started
    ports:
      - "8081:8081"

  mercure:
    image: dunglas/mercure
    restart: unless-stopped
    environment:
      # Uncomment the following line to disable HTTPS
      SERVER_NAME: ":80"
      MERCURE_PUBLISHER_JWT_KEY: "${MERCURE_JWT_SECRET:?err}"
      MERCURE_SUBSCRIBER_JWT_KEY: "${MERCURE_JWT_SECRET:?err}"
    # Uncomment the following line to enable the development mode
    command: /usr/bin/caddy run --config /etc/caddy/Caddyfile.dev
    container_name: mercure
    ports:
      - 3000:80
      # - 443:443
    volumes:
      - ./data/mercure/data:/data
      - ./data/mercure/config:/config

  meilisearch:
    image: getmeili/meilisearch:v1.0
    container_name: meilisearch
    restart: unless-stopped
    ports:
      - 7700:7700
    volumes:
      - ./data/meilisearch:/meili_data
    environment:
      MEILI_MASTER_KEY: "${MEILISEARCH_MASTER_KEY:?err}"
